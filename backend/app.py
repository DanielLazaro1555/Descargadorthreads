from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from selenium import webdriver
from selenium.webdriver.firefox.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from pathlib import Path
from fastapi.responses import FileResponse
import requests
import os
import time

# Inicializar FastAPI
app = FastAPI()

# Habilitar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Carpeta para guardar im√°genes descargadas
UPLOAD_FOLDER = "downloads"
Path(UPLOAD_FOLDER).mkdir(exist_ok=True)  # Crear carpeta si no existe


def scroll_until_all_images_loaded(driver):
    """ Hace scroll hasta que no haya nuevas im√°genes en la p√°gina. """
    last_height = driver.execute_script("return document.body.scrollHeight")
    last_images_count = 0

    for _ in range(15):  # Intentar hasta 15 veces para asegurarnos de que bajamos todo
        driver.execute_script(
            "window.scrollTo(0, document.body.scrollHeight);")
        time.sleep(3)  # Esperar que se carguen las im√°genes

        # Contar im√°genes despu√©s de cada scroll
        img_elements = driver.find_elements(By.TAG_NAME, "img")
        new_images_count = len(img_elements)

        print(f"üîç Detectadas {new_images_count} im√°genes despu√©s del scroll")

        # Si ya no hay m√°s im√°genes nuevas, detener el scroll
        if new_images_count == last_images_count:
            print("‚úÖ No hay m√°s im√°genes nuevas, terminando scroll")
            break

        last_images_count = new_images_count  # Actualizar el n√∫mero de im√°genes
        last_height = driver.execute_script(
            "return document.body.scrollHeight")


def get_media_url(thread_url):
    """ Usa Selenium para obtener la URL de todos los videos e im√°genes en alta calidad. """
    options = webdriver.FirefoxOptions()
    options.add_argument("--headless")  # Modo sin interfaz gr√°fica
    options.add_argument("--disable-gpu")

    service = Service("/usr/local/bin/geckodriver")  # Ruta a geckodriver
    driver = webdriver.Firefox(service=service, options=options)

    try:
        driver.get(thread_url)
        time.sleep(5)  # Esperar carga inicial

        # Hacer scroll profundo hasta cargar todas las im√°genes
        scroll_until_all_images_loaded(driver)

        # Encontrar todos los videos
        video_elements = driver.find_elements(By.TAG_NAME, "video")
        videos = [video.get_attribute("src") for video in video_elements if video.get_attribute(
            "src") and video.get_attribute("src").startswith("https://scontent")]

        # Encontrar todas las im√°genes en alta calidad
        img_elements = driver.find_elements(By.TAG_NAME, "img")
        images = [img.get_attribute("src") for img in img_elements if img.get_attribute(
            "alt") and "Photo" in img.get_attribute("alt") and img.get_attribute("src").startswith("https://scontent")]

        print(f"‚úÖ {len(videos)} VIDEOS ENCONTRADOS")
        print(f"‚úÖ {len(images)} IM√ÅGENES ENCONTRADAS")

        # Si no se encontr√≥ nada, devolver error
        if not videos and not images:
            raise HTTPException(
                status_code=404, detail="No se pudo obtener videos ni im√°genes en alta calidad.")

        return {"videos": videos, "images": images}

    finally:
        driver.quit()  # Cerrar el navegador


@app.get("/get_media")
def get_media(url: str):
    """ Descarga todas las im√°genes si es necesario y devuelve listas separadas de videos e im√°genes. """
    try:
        media = get_media_url(url)  # Obtener URLs reales de contenido
        local_images = []

        # Descargar im√°genes y servirlas localmente
        for img_url in media["images"]:
            img_filename = img_url.split("/")[-1].split("?")[0]
            img_path = f"{UPLOAD_FOLDER}/{img_filename}"

            response = requests.get(img_url, stream=True)
            if response.status_code == 200:
                with open(img_path, "wb") as f:
                    for chunk in response.iter_content(1024):
                        f.write(chunk)
                local_images.append(
                    f"http://127.0.0.1:8000/downloads/{img_filename}")

        return {
            "videos": media["videos"],
            "images": local_images  # Servimos im√°genes desde el backend
        }

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.get("/downloads/{filename}")
def serve_file(filename: str):
    """ Sirve los archivos guardados en el backend """
    file_path = f"{UPLOAD_FOLDER}/{filename}"
    if Path(file_path).exists():
        return FileResponse(file_path)
    raise HTTPException(status_code=404, detail="Archivo no encontrado")
